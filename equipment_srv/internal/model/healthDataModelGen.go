// Code generated by goctl. DO NOT EDIT.
package model

import (
	"context"
	"time"

	"github.com/zeromicro/go-zero/core/stores/mon"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type healthDataModel interface {
	Insert(ctx context.Context, data *HealthData) error
	//XtyInsert(ctx context.Context, data *XtyHealthData) error
	FindOne(ctx context.Context, id string) (*HealthData, error)
	FindByAny(ctx context.Context, p any) ([]HealthData, error)
	Update(ctx context.Context, data *HealthData) (*mongo.UpdateResult, error)
	DtmUpdate(ctx context.Context, mc *mongo.Client, id string, data bson.M) (*mongo.UpdateResult, error)
	Delete(ctx context.Context, id string) (int64, error)
}

type defaultHealthDataModel struct {
	conn *mon.Model
}

func newDefaultHealthDataModel(conn *mon.Model) *defaultHealthDataModel {
	return &defaultHealthDataModel{conn: conn}
}

func (m *defaultHealthDataModel) Insert(ctx context.Context, data *HealthData) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.Data = data.Data
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}

	_, err := m.conn.InsertOne(ctx, data)
	return err
}

func (m *defaultHealthDataModel) XtyInsert(ctx context.Context, data *XTYData) error {
	_, err := m.conn.InsertOne(ctx, data)
	return err
}

func (m *defaultHealthDataModel) FindOne(ctx context.Context, id string) (*HealthData, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}
	var data HealthData
	err = m.conn.FindOne(ctx, &data, bson.M{"_id": oid})
	switch err {
	case nil:
		return &data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHealthDataModel) FindByAny(ctx context.Context, filter any) ([]HealthData, error) {
	var data []HealthData
	//err := m.conn.FindOne(ctx, &data, sel)
	err := m.conn.Find(ctx, &data, filter)
	switch err {
	case nil:
		return data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHealthDataModel) Update(ctx context.Context, data *HealthData) (*mongo.UpdateResult, error) {
	//oid, err := primitive.ObjectIDFromHex(data.ID)
	//if err != nil {
	//	return nil, ErrInvalidObjectId
	//}
	res, err := m.conn.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return res, err
}

func (m *defaultHealthDataModel) DtmUpdate(ctx context.Context, mc *mongo.Client, id string, data bson.M) (*mongo.UpdateResult, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}
	_, err = mc.Database("wk_health_data").Collection("health_data").UpdateOne(ctx, bson.M{"_id": oid}, bson.M{"$set": data})
	return nil, err
}

func (m *defaultHealthDataModel) Delete(ctx context.Context, id string) (int64, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return 0, ErrInvalidObjectId
	}

	res, err := m.conn.DeleteOne(ctx, bson.M{"_id": oid})
	return res, err
}
