// Code generated by goctl. DO NOT EDIT.
// Source: equipment.proto

package equipment

import (
	"context"

	"wk-middleground/equipment_srv/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BindRequest       = __.BindRequest
	EquipmentData     = __.EquipmentData
	EquipmentRequest  = __.EquipmentRequest
	EquipmentResponse = __.EquipmentResponse
	ResRequest        = __.ResRequest
	UpEqpRequest      = __.UpEqpRequest

	Equipment interface {
		// 数据查询
		GetEqpData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
		// 绑定设备
		BindEqpData(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*ResRequest, error)
		// 血糖仪数据上报
		UpXtyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error)
		// 血氧仪数据上报
		UpXyyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error)
	}

	defaultEquipment struct {
		cli zrpc.Client
	}
)

func NewEquipment(cli zrpc.Client) Equipment {
	return &defaultEquipment{
		cli: cli,
	}
}

// 数据查询
func (m *defaultEquipment) GetEqpData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	client := __.NewEquipmentClient(m.cli.Conn())
	return client.GetEqpData(ctx, in, opts...)
}

// 绑定设备
func (m *defaultEquipment) BindEqpData(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*ResRequest, error) {
	client := __.NewEquipmentClient(m.cli.Conn())
	return client.BindEqpData(ctx, in, opts...)
}

// 血糖仪数据上报
func (m *defaultEquipment) UpXtyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error) {
	client := __.NewEquipmentClient(m.cli.Conn())
	return client.UpXtyData(ctx, in, opts...)
}

// 血氧仪数据上报
func (m *defaultEquipment) UpXyyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error) {
	client := __.NewEquipmentClient(m.cli.Conn())
	return client.UpXyyData(ctx, in, opts...)
}
