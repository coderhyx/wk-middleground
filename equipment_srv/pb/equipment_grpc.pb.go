// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: equipment.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Equipment_GetEqpData_FullMethodName  = "/pb.Equipment/getEqpData"
	Equipment_BindEqpData_FullMethodName = "/pb.Equipment/bindEqpData"
	Equipment_UpXtyData_FullMethodName   = "/pb.Equipment/upXtyData"
	Equipment_UpXyyData_FullMethodName   = "/pb.Equipment/upXyyData"
)

// EquipmentClient is the client API for Equipment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipmentClient interface {
	// 数据查询
	GetEqpData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
	// 绑定设备
	BindEqpData(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*ResRequest, error)
	// 血糖仪数据上报
	UpXtyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error)
	// 血氧仪数据上报
	UpXyyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error)
}

type equipmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipmentClient(cc grpc.ClientConnInterface) EquipmentClient {
	return &equipmentClient{cc}
}

func (c *equipmentClient) GetEqpData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, Equipment_GetEqpData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) BindEqpData(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*ResRequest, error) {
	out := new(ResRequest)
	err := c.cc.Invoke(ctx, Equipment_BindEqpData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) UpXtyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error) {
	out := new(ResRequest)
	err := c.cc.Invoke(ctx, Equipment_UpXtyData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipmentClient) UpXyyData(ctx context.Context, in *EquipmentRequest, opts ...grpc.CallOption) (*ResRequest, error) {
	out := new(ResRequest)
	err := c.cc.Invoke(ctx, Equipment_UpXyyData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipmentServer is the server API for Equipment service.
// All implementations must embed UnimplementedEquipmentServer
// for forward compatibility
type EquipmentServer interface {
	// 数据查询
	GetEqpData(context.Context, *EquipmentRequest) (*EquipmentResponse, error)
	// 绑定设备
	BindEqpData(context.Context, *BindRequest) (*ResRequest, error)
	// 血糖仪数据上报
	UpXtyData(context.Context, *EquipmentRequest) (*ResRequest, error)
	// 血氧仪数据上报
	UpXyyData(context.Context, *EquipmentRequest) (*ResRequest, error)
	mustEmbedUnimplementedEquipmentServer()
}

// UnimplementedEquipmentServer must be embedded to have forward compatible implementations.
type UnimplementedEquipmentServer struct {
}

func (UnimplementedEquipmentServer) GetEqpData(context.Context, *EquipmentRequest) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEqpData not implemented")
}
func (UnimplementedEquipmentServer) BindEqpData(context.Context, *BindRequest) (*ResRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEqpData not implemented")
}
func (UnimplementedEquipmentServer) UpXtyData(context.Context, *EquipmentRequest) (*ResRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpXtyData not implemented")
}
func (UnimplementedEquipmentServer) UpXyyData(context.Context, *EquipmentRequest) (*ResRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpXyyData not implemented")
}
func (UnimplementedEquipmentServer) mustEmbedUnimplementedEquipmentServer() {}

// UnsafeEquipmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipmentServer will
// result in compilation errors.
type UnsafeEquipmentServer interface {
	mustEmbedUnimplementedEquipmentServer()
}

func RegisterEquipmentServer(s grpc.ServiceRegistrar, srv EquipmentServer) {
	s.RegisterService(&Equipment_ServiceDesc, srv)
}

func _Equipment_GetEqpData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).GetEqpData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_GetEqpData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).GetEqpData(ctx, req.(*EquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_BindEqpData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).BindEqpData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_BindEqpData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).BindEqpData(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_UpXtyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).UpXtyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_UpXtyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).UpXtyData(ctx, req.(*EquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Equipment_UpXyyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipmentServer).UpXyyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Equipment_UpXyyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipmentServer).UpXyyData(ctx, req.(*EquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Equipment_ServiceDesc is the grpc.ServiceDesc for Equipment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Equipment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Equipment",
	HandlerType: (*EquipmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getEqpData",
			Handler:    _Equipment_GetEqpData_Handler,
		},
		{
			MethodName: "bindEqpData",
			Handler:    _Equipment_BindEqpData_Handler,
		},
		{
			MethodName: "upXtyData",
			Handler:    _Equipment_UpXtyData_Handler,
		},
		{
			MethodName: "upXyyData",
			Handler:    _Equipment_UpXyyData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equipment.proto",
}
